---
layout: post
title: "Q23 FSAE Controller Area Network Software Architecture"
date: 2022-09-30 12:00:00 +0500
description: "Establishing communication with the power distribution module over CAN for our QFSAE racecar."
img: ../img/qfsae2023/thumb.png
tags: [FSAE, CAN, Software Development]
---

## Introduction

In the 2023 FSAE Season as a member of Queen's Formula, I contributed in the design, development, and implementation of the software interface to integrate our Power Distribution Module (MoTeC PDM15) with our racecar’s Controller Area Network (CAN). This module was responsible for regulating power to critical systems and reading sensor values. My work focused on early development and of the C++ library, which was further built ontop of and refined by other team members integrating CAN from the ECU and a custom STM32 dashboard PCB. In this way, my work was essential for the car's low voltage system integration and safety fault monitoring.

This report provides a detailed account of the software insights, its integration with the PDM15, and its implementation in the CAN Abstraction Layer (CAL).

---

## Role and Responsibilities

The library was designed to:

- Parse incoming CAN messages from the PDM15 and decode data values (e.g., voltages, currents, fault states).
- Provide an abstraction layer that allowed other team members working on the dashboard to interface with the PDM15 without needing to understand its internal CAN messaging protocols.

While on the electrical team this year, I also helped map out, design, and manufacture the vehicle’s wiring harness, including the CAN bus wiring. I collaborated closely with the rest of the team to ensure the software functioned seamlessly with the hardware in the in the larger system. This included testing control signals using a Mock ECU and troubleshooting issues.

---
## Photo/Video Gallery
<blockquote class="instagram-media" data-instgrm-captioned data-instgrm-permalink="https://www.instagram.com/reel/Cq8xIErM0M7/?utm_source=ig_embed&amp;utm_campaign=loading" data-instgrm-version="14" style=" background:#FFF; border:0; border-radius:3px; box-shadow:0 0 1px 0 rgba(0,0,0,0.5),0 1px 10px 0 rgba(0,0,0,0.15); margin: 1px; max-width:540px; min-width:326px; padding:0; width:99.375%; width:-webkit-calc(100% - 2px); width:calc(100% - 2px);"><div style="padding:16px;"> <a href="https://www.instagram.com/reel/Cq8xIErM0M7/?utm_source=ig_embed&amp;utm_campaign=loading" style=" background:#FFFFFF; line-height:0; padding:0 0; text-align:center; text-decoration:none; width:100%;" target="_blank"> <div style=" display: flex; flex-direction: row; align-items: center;"> <div style="background-color: #F4F4F4; border-radius: 50%; flex-grow: 0; height: 40px; margin-right: 14px; width: 40px;"></div> <div style="display: flex; flex-direction: column; flex-grow: 1; justify-content: center;"> <div style=" background-color: #F4F4F4; border-radius: 4px; flex-grow: 0; height: 14px; margin-bottom: 6px; width: 100px;"></div> <div style=" background-color: #F4F4F4; border-radius: 4px; flex-grow: 0; height: 14px; width: 60px;"></div></div></div><div style="padding: 19% 0;"></div> <div style="display:block; height:50px; margin:0 auto 12px; width:50px;"><svg width="50px" height="50px" viewBox="0 0 60 60" version="1.1" xmlns="https://www.w3.org/2000/svg" xmlns:xlink="https://www.w3.org/1999/xlink"><g stroke="none" stroke-width="1" fill="none" fill-rule="evenodd"><g transform="translate(-511.000000, -20.000000)" fill="#000000"><g><path d="M556.869,30.41 C554.814,30.41 553.148,32.076 553.148,34.131 C553.148,36.186 554.814,37.852 556.869,37.852 C558.924,37.852 560.59,36.186 560.59,34.131 C560.59,32.076 558.924,30.41 556.869,30.41 M541,60.657 C535.114,60.657 530.342,55.887 530.342,50 C530.342,44.114 535.114,39.342 541,39.342 C546.887,39.342 551.658,44.114 551.658,50 C551.658,55.887 546.887,60.657 541,60.657 M541,33.886 C532.1,33.886 524.886,41.1 524.886,50 C524.886,58.899 532.1,66.113 541,66.113 C549.9,66.113 557.115,58.899 557.115,50 C557.115,41.1 549.9,33.886 541,33.886 M565.378,62.101 C565.244,65.022 564.756,66.606 564.346,67.663 C563.803,69.06 563.154,70.057 562.106,71.106 C561.058,72.155 560.06,72.803 558.662,73.347 C557.607,73.757 556.021,74.244 553.102,74.378 C549.944,74.521 548.997,74.552 541,74.552 C533.003,74.552 532.056,74.521 528.898,74.378 C525.979,74.244 524.393,73.757 523.338,73.347 C521.94,72.803 520.942,72.155 519.894,71.106 C518.846,70.057 518.197,69.06 517.654,67.663 C517.244,66.606 516.755,65.022 516.623,62.101 C516.479,58.943 516.448,57.996 516.448,50 C516.448,42.003 516.479,41.056 516.623,37.899 C516.755,34.978 517.244,33.391 517.654,32.338 C518.197,30.938 518.846,29.942 519.894,28.894 C520.942,27.846 521.94,27.196 523.338,26.654 C524.393,26.244 525.979,25.756 528.898,25.623 C532.057,25.479 533.004,25.448 541,25.448 C548.997,25.448 549.943,25.479 553.102,25.623 C556.021,25.756 557.607,26.244 558.662,26.654 C560.06,27.196 561.058,27.846 562.106,28.894 C563.154,29.942 563.803,30.938 564.346,32.338 C564.756,33.391 565.244,34.978 565.378,37.899 C565.522,41.056 565.552,42.003 565.552,50 C565.552,57.996 565.522,58.943 565.378,62.101 M570.82,37.631 C570.674,34.438 570.167,32.258 569.425,30.349 C568.659,28.377 567.633,26.702 565.965,25.035 C564.297,23.368 562.623,22.342 560.652,21.575 C558.743,20.834 556.562,20.326 553.369,20.18 C550.169,20.033 549.148,20 541,20 C532.853,20 531.831,20.033 528.631,20.18 C525.438,20.326 523.257,20.834 521.349,21.575 C519.376,22.342 517.703,23.368 516.035,25.035 C514.368,26.702 513.342,28.377 512.574,30.349 C511.834,32.258 511.326,34.438 511.181,37.631 C511.035,40.831 511,41.851 511,50 C511,58.147 511.035,59.17 511.181,62.369 C511.326,65.562 511.834,67.743 512.574,69.651 C513.342,71.625 514.368,73.296 516.035,74.965 C517.703,76.634 519.376,77.658 521.349,78.425 C523.257,79.167 525.438,79.673 528.631,79.82 C531.831,79.965 532.853,80.001 541,80.001 C549.148,80.001 550.169,79.965 553.369,79.82 C556.562,79.673 558.743,79.167 560.652,78.425 C562.623,77.658 564.297,76.634 565.965,74.965 C567.633,73.296 568.659,71.625 569.425,69.651 C570.167,67.743 570.674,65.562 570.82,62.369 C570.966,59.17 571,58.147 571,50 C571,41.851 570.966,40.831 570.82,37.631"></path></g></g></g></svg></div><div style="padding-top: 8px;"> <div style=" color:#3897f0; font-family:Arial,sans-serif; font-size:14px; font-style:normal; font-weight:550; line-height:18px;">View this post on Instagram</div></div><div style="padding: 12.5% 0;"></div> <div style="display: flex; flex-direction: row; margin-bottom: 14px; align-items: center;"><div> <div style="background-color: #F4F4F4; border-radius: 50%; height: 12.5px; width: 12.5px; transform: translateX(0px) translateY(7px);"></div> <div style="background-color: #F4F4F4; height: 12.5px; transform: rotate(-45deg) translateX(3px) translateY(1px); width: 12.5px; flex-grow: 0; margin-right: 14px; margin-left: 2px;"></div> <div style="background-color: #F4F4F4; border-radius: 50%; height: 12.5px; width: 12.5px; transform: translateX(9px) translateY(-18px);"></div></div><div style="margin-left: 8px;"> <div style=" background-color: #F4F4F4; border-radius: 50%; flex-grow: 0; height: 20px; width: 20px;"></div> <div style=" width: 0; height: 0; border-top: 2px solid transparent; border-left: 6px solid #f4f4f4; border-bottom: 2px solid transparent; transform: translateX(16px) translateY(-4px) rotate(30deg)"></div></div><div style="margin-left: auto;"> <div style=" width: 0px; border-top: 8px solid #F4F4F4; border-right: 8px solid transparent; transform: translateY(16px);"></div> <div style=" background-color: #F4F4F4; flex-grow: 0; height: 12px; width: 16px; transform: translateY(-4px);"></div> <div style=" width: 0; height: 0; border-top: 8px solid #F4F4F4; border-left: 8px solid transparent; transform: translateY(-4px) translateX(8px);"></div></div></div> <div style="display: flex; flex-direction: column; flex-grow: 1; justify-content: center; margin-bottom: 24px;"> <div style=" background-color: #F4F4F4; border-radius: 4px; flex-grow: 0; height: 14px; margin-bottom: 6px; width: 224px;"></div> <div style=" background-color: #F4F4F4; border-radius: 4px; flex-grow: 0; height: 14px; width: 144px;"></div></div></a><p style=" color:#c9c8cd; font-family:Arial,sans-serif; font-size:14px; line-height:17px; margin-bottom:0; margin-top:8px; overflow:hidden; padding:8px 0 7px; text-align:center; text-overflow:ellipsis; white-space:nowrap;"><a href="https://www.instagram.com/reel/Cq8xIErM0M7/?utm_source=ig_embed&amp;utm_campaign=loading" style=" color:#c9c8cd; font-family:Arial,sans-serif; font-size:14px; font-style:normal; font-weight:normal; line-height:17px; text-decoration:none;" target="_blank">A post shared by Queen&#39;s Racing Formula SAE Team (@queensracing)</a></p></div></blockquote>
<script async src="//www.instagram.com/embed.js"></script>

![](../assets/img/qfsae2023/4.jpg)

--- 

## Technical Implementation

### Overview of the PDM15 CAN Interface

The PDM15 transmits and receives CAN messages carrying 8 bytes of data, where specific bytes and bits represent different outputs, voltages, currents, and fault statuses. The software implementation was tailored to the PDM15's specific CAN message structure and multiplicative constants as detailed in its [documentation](https://www.motec.com.au/hessian/uploads/PDM_User_Manual_3a926f869d.pdf).

#### CAN Data Mappings

Examples of key data mappings include:

- **Throttle Potentiometer Voltage**:
  - CAN ID: `0x7F0`
  - Byte: `0`
  - Bitmask: `0xFF`
  - Multiplier: `0.2`
  - Data Type: `Float`

- **Fuel Pump Current**:
  - CAN ID: `0x7F0`
  - Byte: `2`
  - Bitmask: `0xFF`
  - Multiplier: `0.5`
  - Data Type: `Float`

Each of these mappings was implemented in the software as a `constexpr` `data` structure in C++, encapsulating all relevant metadata for decoding or encoding the value.

#### Example `data` Structure

```cpp
constexpr data ThrottlePotentiometerVoltage = {
    MOTEC_ID::PDM_1,   // CAN ID
    0,                 // Start Byte
    0xFF,              // Bitmask
    0.2,               // Multiplier
    DataType::Float    // Data Type
};
```

This structure allowed the software to generalize CAN message decoding, enabling a single function to extract the desired value for any data type based on its configuration.

---

### Library Architecture

The library, implemented under the namespace `CAL::DATA_PDM` used an object-oriented approach to represent and manage the PDM’s inputs, outputs, and internal states. The key features of the library included:

#### 1. **CAN Message Parsing (Outbound Signal from PDM)**

Functions parsed incoming CAN messages and extract the required data fields. For example, extracting the throttle potentiometer voltage involved:

- Identifying the CAN ID (`0x7F0`).
- Locating Byte 0 in the payload.
- Applying the bitmask (`0xFF`).
- Scaling the raw data using the multiplier (`0.2`) from the documentation.

```cpp
float parseThrottleVoltage(const CAN_msg_t &msg) {
    return (msg.data[ThrottlePotentiometerVoltage.start_idx] & ThrottlePotentiometerVoltage.bitmask)
           * ThrottlePotentiometerVoltage.multiplier;
}
```

These functions continuously decoded critical information for the driver on the dashboard and the pit crew used for debugging and real-time data monitoring.

#### 2. **CAN Message Construction (Inbound Signal to PDM)**

Constructing outgoing CAN messages required encoding data into the appropriate bytes and applying scaling factors. For example, updating the fuel pump’s output voltage involved:

- Writing the scaled value to Byte 3.
- Ensuring alignment with the PDM’s CAN message structure.

```cpp
void setFuelPumpVoltage(CAN_msg_t &msg, float voltage) {
    msg.data[FuelPumpVoltage.start_idx] = static_cast<uint8_t>(voltage / FuelPumpVoltage.multiplier);
}
```

This abstraction allowed other developers to control outputs without delving into the complexities of CAN message formatting.

#### 3. **Fault Monitoring**

The library continuously monitored fault flags (e.g., over-current or under-voltage) accross the sensor suite by decoding status bytes from the PDM. For instance, a fault in the throttle body’s current output (Byte 6) was flagged as:

```cpp
bool checkThrottleBodyFault(const CAN_msg_t &msg) {
    return (msg.data[tBStatusFault.start_idx] & tBStatusFault.bitmask) > 0;
}
```

#### 4. **Real-Time Diagnostics**: Seeed Studio CAN Shield-Based Diagnostics Tool

To further support real-time diagnostics, I developed a standalone diagnostics tool using a Seeed Studio CAN shield. This tool enabled the team to monitor and debug CAN communication during development and testing.

The objective of this sub-project was to create a portable and efficient solution for capturing and printing CAN messages in real-time, providing engineers with visibility into the PDM15's operation without requiring additional specialized hardware.

### 4. **Real-Time Diagnostics**: CAL-Integrated CAN Monitoring Tool

To enhance real-time diagnostics during racecar development, I engineered a standalone PDM CAN monitoring tool leveraging a **Seeed Studio CAN Shield** and the **CAL (CAN Abstraction Layer) library**. This tool enabled structured decoding of PDM messages and delivered immediate insight into system behavior without requiring a laptop or advanced data logger.

The goal of this tool was to provide engineers with a **portable**, **interpretable**, and **real-time** view of CAN traffic to and from the PDM, decoding meaningful fields such as voltages and currents using MoTeC calibration constants and formats.

**Hardware Setup**  
- Arduino Uno + Seeed Studio CAN Shield (MCP2515, 8 MHz)
- Connected to a shared CAN bus running at **500 kbps**
- Powered via USB for portability during vehicle testing

```cpp
#include <mcp_can.h>
#include <SPI.h>
#include "cal.hpp"

MCP_CAN CAN(10);  // CS pin
CAL::CAL cal;     // CAL object

void printFloatVar(const char* label, const CAL::data& dataField) {
    float value;
    if (cal.returnVar(dataField, value) == 0) {
        Serial.print(label);
        Serial.print(": ");
        Serial.println(value, 3);
    }
}

void setup() {
    Serial.begin(115200);
    while (CAN.begin(MCP_ANY, 500000, MCP_8MHZ) != CAN_OK) {
        Serial.println("CAN init failed, retrying...");
        delay(1000);
    }
    Serial.println("CAN initialized successfully");
}

void loop() {
    unsigned char len = 0;
    unsigned char buf[8];

    if (CAN.checkReceive() == CAN_MSGAVAIL) {
        CAN.readMsgBuf(&len, buf);
        unsigned long canId = CAN.getCanId();

        // Build CAL-compatible message
        CAL::CAN_msg_t msg;
        msg.id = canId;
        msg.len = len;
        for (int i = 0; i < len; i++) {
            msg.data[i] = buf[i];
        }

        // Decode and update CAL internal state
        if (cal.updatePackage(msg) == 0) {
            Serial.print("Received 0x");
            Serial.println(canId, HEX);

            if (canId == CAL::MOTEC_ID::PDM_1) {
                printFloatVar("ThrottlePot V", CAL::DATA_PDM::ThrottlePotentiometerVoltage);
                printFloatVar("Battery V", CAL::DATA_PDM::BatteryVoltage);
                printFloatVar("Fuel Pump I", CAL::DATA_PDM::FuelPumpCurrent);
                printFloatVar("Fuel Pump V", CAL::DATA_PDM::FuelPumpVoltage);
                printFloatVar("Kill Switch V", CAL::DATA_PDM::KillSwitchVoltage);
                printFloatVar("Throttle Body I", CAL::DATA_PDM::ThrottleBodyCurrent);
                printFloatVar("Throttle Body V", CAL::DATA_PDM::ThrottleBodyVoltage);
                Serial.println("---");
            }

            if (canId == CAL::MOTEC_ID::PDM_2) {
                printFloatVar("Fuel Injector I", CAL::DATA_PDM::FuelInjectorCurrent);
                printFloatVar("Fuel Injector V", CAL::DATA_PDM::FuelInjectorVoltage);
                Serial.println("---");
            }
        } else {
            Serial.print("Unhandled CAN ID: 0x");
            Serial.println(canId, HEX);
        }
    }
}
```


#### Benefits to Development Workflow

- **Structured Decoding**: Uses CAL to convert raw data into interpretable, engineering-accurate units.
- **Real-Time Feedback**: Helps engineers instantly validate PDM outputs during bench testing.
- **Fault Insight**: Flags under-voltage, over-current, or disconnected subsystems on the fly.


This CAL-integrated diagnostic tool became a vital part of our real-time validation framework, reducing diagnosis time and enabling the team to **rapidly iterate and debug the PDM15 integration** into the vehicle during the pre-season.

---

### Challenges and Solutions

#### Handling CAN Message Timeouts

To ensure the system remained stable when CAN messages were delayed or lost, default timeout behaviors were implemented. For example, if the throttle voltage message timed out, its value was reset to `0.0`.

```cpp
float throttleVoltage = (timeout) ? 0.0f : parseThrottleVoltage(msg);
```

#### Debugging Complex Faults

Some faults were intermittent and brief, requiring extensive logging and review of CAN messages. I wrote a logging utility to continuously monitor the messages and have any odd results (outside of expected ranges) persist untilk review, which aided in the identification of issues.

---

## Collaboration with the Electrical Team in Q23

While my focus was on the software, I collaborated with the electrical engineers during system integration. This included:

- **Assembly of Wiring Loom**: Ensured the wiring adhered to MoTeC’s CAN bus specifications, including proper use of terminating resistors. Followed the competition rules closely during the assembly process.
- **Testing Outputs**: Assisted in debugging output channels by sending test CAN messages from my software to toggle outputs (e.g., fuel pumps, fans).
- **Fault Simulation**: Simulated fault conditions (e.g., short circuits) to validate the PDM’s fault-handling logic.
- **Collaboration with Electrical Systems Lead**: Communicated with my mentor, Ethan, to gain crucial insights into the overall design of the car's electrical system and ensure compliance with competition guidelines.

I also communicated with the dashboard team to assess their requirements.

The library was integrated, finalized, deployed, and further tested by [Jacob
Chisholm's](https://github.com/Jchisholm204) CAN Bus Abstraction Layer (CAL)
[library](https://github.com/qfsae/CAL).

---

## Results and Impact

The developed software helped the team by integrating the PDM into the ECU and dashboard. This enabled power management and diagnostics for our racecar:

1. **Reliability**: The PDM15 handled all power distribution seamlessly, with software-controlled fault recovery.
2. **Real-Time Insights**: Drivers and engineers could monitor critical metrics fromt he PDM (e.g., battery voltage, output currents) in real-time via the dashboard.
3. **Reduced Debugging Time**: The diagnostic capabilities of the library helped identify and resolve wiring or configuration issues quickly.

The reusable C++ library became a cornerstone of our vehicle’s electrical system, enabling future team members to build upon a reliable and extensible foundation.

---

## Conclusion

This project highlighted the importance of working collaboratively on robust software to enable advanced hardware like the PDM15 to perform in a high-stakes motorsport environment. By working on the development of a flexible and feature-rich library, I contributed to the overall success of our Formula SAE vehicle for years to come.

